---
- name: Check if cluster consist of at least 2 nodes
  fail: msg="Cluster must have at least 2 members"
  when: play_hosts|count() < 2
  run_once: true

- name: Include distribution version specific variables
  include_vars: "el{{ ansible_distribution_major_version }}.yml"

- name: (RHEL only) enable repositories
  include_tasks: rhel_repos.yml
  when: ansible_distribution == 'RedHat'

- name: Install packages from local media
  include_tasks: install_local_media.yml
  when: use_local_media|bool

- name: Install packages from system defined repositories
  include_tasks: install_normal.yml
  when: not use_local_media|bool

# TODO allow to choose if to use FQDN or just short hostname, defaulting to short hostname
# WARNING: the 'ansible_fqdn' is resolved from /etc/hosts file! If you change hostname
# of machine through /etc/hosts the ansible will pick it up and use it!
- name: Add hosts to /etc/hosts
  lineinfile:
  args:
    dest: '/etc/hosts'
    regexp: "{{ hostvars[item]['ansible_default_ipv4']['address'] }} "
    line: "{{ hostvars[item]['ansible_default_ipv4']['address'] }} {{ hostvars[item]['ansible_fqdn'].split('.')[0] }}"
  with_items: "{{ play_hosts }}"

- name: Create cluster system group
  group: name={{ cluster_group }} state=present

- name: Create cluster system user
  user: 
    name={{ cluster_user }} state=present
    password={{ cluster_user_pass | password_hash('sha512', ansible_hostname|replace('-','x')|truncate(16, True, '')) }}
    groups={{ cluster_group }} comment="HA Cluster Administrator"

- name: Enable/Disable PCSD web GUI
  lineinfile:
  args:
    dest: '/etc/sysconfig/pcsd'
    regexp: "PCSD_DISABLE_GUI=.*"
    line: "PCSD_DISABLE_GUI={{ enable_pcsd_gui|bool|ternary('false','true') }}"
  when: enable_pcsd_gui != 'nochange'

- name: Enable and start PCSD service
  service: name=pcsd enabled=yes state=started

- name: Setup firewall for RHEL/CentOS systems
  include_tasks: "firewall-el{{ ansible_distribution_major_version }}.yml"
  when: cluster_firewall|bool

- name: Authorize cluster nodes
  pcs_auth: node_name={{ hostvars[item]['ansible_fqdn'].split('.')[0] }} username={{ cluster_user }} password={{ cluster_user_pass }}
  with_items: '{{ play_hosts }}'

- name: Setup cluster
  pcs_cluster: node_list="{% for item in play_hosts %}{{ hostvars[item]['ansible_hostname'] }} {% endfor %}" cluster_name="{{ cluster_name }}" transport="{{ cluster_transport }}"
  run_once: true

- name: Start cluster services on all nodes
  service: name={{ item }} state=started
  with_items:
    - pacemaker 
    - corosync

- name: Enable cluster services on boot
  service: name={{ item }} enabled=yes
  when: cluster_enable_service|bool
  with_items:
    - pacemaker 
    - corosync

### fencing setup
- name: Setup automatic fence_xvm
  include_tasks: fence_xvm.yml
  when: cluster_configure_fence_xvm is defined and cluster_configure_fence_xvm|bool

- name: Setup fence_kdump
  include_tasks: fence_kdump.yml
  when: cluster_configure_fence_kdump is defined and cluster_configure_fence_kdump|bool

- name: Setup custom fence devices
  include_tasks: fence_custom.yml
